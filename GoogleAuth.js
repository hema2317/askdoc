import * as WebBrowser from 'expo-web-browser';
import * as AuthSession from 'expo-auth-session';
import { Alert, Platform, Linking } from 'react-native';
import { supabase } from './supabaseClient';

// Ensure WebBrowser can handle the auth session completion
WebBrowser.maybeCompleteAuthSession();

export const signInWithGoogle = async () => {
  try {
    // Use Supabase's callback URL directly
    const redirectUri = 'http://nfwbjpeywcescsyqac.supabase.co/auth/v1/callback';

    // Log the redirect URI for debugging
    console.log('Constructed Redirect URI:', redirectUri);
    console.log('Is in Development Mode (__DEV__):', __DEV__);
    console.log('Platform:', Platform.OS);

    // Initiate Google OAuth with Supabase
    const { data, error } = await supabase.auth.signInWithOAuth({
      provider: 'google',
      options: {
        redirectTo: redirectUri,
        // skipBrowserRedirect: true, // Remove this to let Supabase handle the redirect
      },
    });

    if (error) {
      console.error('Supabase OAuth Error:', error);
      console.error('Error Details:', JSON.stringify(error, null, 2));
      throw error;
    }

    // Log the OAuth URL generated by Supabase
    console.log('Supabase OAuth URL:', data.url);

    // Open the OAuth URL in a browser for user authentication
    const result = await WebBrowser.openAuthSessionAsync(
      data.url,
      redirectUri,
      {
        showInRecents: true,
      }
    );

    // Log the result of the authentication flow
    console.log('AuthSession Result:', result);

    if (result.type === 'success') {
      const url = result.url;
      // Log the redirect URL after authentication
      console.log('Redirect URL:', url);

      // Extract access and refresh tokens from the redirect URL
      const params = new URLSearchParams(url.split('#')[1]);
      const access_token = params.get('access_token');
      const refresh_token = params.get('refresh_token');

      // Log the extracted tokens
      console.log('Access Token:', access_token);
      console.log('Refresh Token:', refresh_token);

      if (access_token && refresh_token) {
        // Set the session in Supabase using the tokens
        const {
          data: { session },
          error: sessionError,
        } = await supabase.auth.setSession({
          access_token,
          refresh_token,
        });

        if (sessionError) {
          console.error('Session Error:', sessionError);
          throw sessionError;
        }

        // Log the final session object
        console.log('Session:', session);
        return session;
      } else {
        console.error('No access or refresh token found');
        throw new Error('No access or refresh token found');
      }
    } else {
      console.log('AuthSession failed:', result);
      throw new Error('Authentication cancelled or failed');
    }
  } catch (error) {
    console.error('Google Auth Error:', error);
    Alert.alert('Authentication Error', error.message);
    return null;
  }
};